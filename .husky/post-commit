#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running post-commit code review checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any issues are found
ISSUES_FOUND=0

echo "\n📋 Code Quality Checklist:"

# 1. Check for console.log statements
echo -n "  ✓ Checking for console.log statements... "
if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" app components lib 2>/dev/null | grep -v "eslint-disable-line"; then
  echo "${RED}❌ Found console.log statements${NC}"
  ISSUES_FOUND=1
else
  echo "${GREEN}✓ Clean${NC}"
fi

# 2. Check for TODO comments
echo -n "  ✓ Checking for TODO comments... "
TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" app components lib 2>/dev/null | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
  echo "${YELLOW}⚠️  Found $TODO_COUNT TODO/FIXME/HACK comments${NC}"
fi

# 3. Run TypeScript check
echo -n "  ✓ Running TypeScript check... "
if npm run type-check --silent 2>/dev/null; then
  echo "${GREEN}✓ No type errors${NC}"
else
  echo "${RED}❌ TypeScript errors found${NC}"
  ISSUES_FOUND=1
fi

# 4. Run ESLint
echo -n "  ✓ Running ESLint check... "
if npm run lint --silent 2>&1 | grep -q "No ESLint warnings or errors"; then
  echo "${GREEN}✓ No linting errors${NC}"
else
  echo "${RED}❌ ESLint errors found${NC}"
  ISSUES_FOUND=1
fi

# 5. Check for proper error handling
echo -n "  ✓ Checking for unhandled promises... "
UNHANDLED=$(grep -r "\.then(" --include="*.ts" --include="*.tsx" app components lib 2>/dev/null | grep -v "\.catch\|try\|async" | wc -l)
if [ $UNHANDLED -gt 0 ]; then
  echo "${YELLOW}⚠️  Found $UNHANDLED potential unhandled promises${NC}"
else
  echo "${GREEN}✓ Clean${NC}"
fi

# 6. Check test coverage (if tests exist)
if [ -f "package.json" ] && grep -q "\"test\":" package.json; then
  echo -n "  ✓ Checking test coverage... "
  echo "${YELLOW}⚠️  Tests not configured yet${NC}"
fi

# 7. Check for security issues
echo -n "  ✓ Checking for hardcoded secrets... "
if grep -r "api[_-]key\|secret\|password\|token" --include="*.ts" --include="*.tsx" app components lib 2>/dev/null | grep -v "interface\|type\|:\s*string" | grep -i "=\s*[\"'][^\"']*[\"']"; then
  echo "${RED}❌ Potential hardcoded secrets found${NC}"
  ISSUES_FOUND=1
else
  echo "${GREEN}✓ Clean${NC}"
fi

# Summary
echo "\n📊 Summary:"
if [ $ISSUES_FOUND -eq 0 ]; then
  echo "${GREEN}✅ All checks passed! Code is ready for review.${NC}"
else
  echo "${RED}❌ Issues found! Please fix before pushing.${NC}"
  echo "${YELLOW}💡 Tip: Run 'npm run validate' to see detailed errors${NC}"
fi

echo ""
#!/bin/sh
# Agent Session End Hook
# Called when an agent completes work to validate deliverables

if [ $# -lt 1 ]; then
    echo "Usage: $0 <claimed-deliverables-json> [session-id]"
    echo "Example: $0 '[{\"type\":\"file_created\",\"path\":\"src/new-file.ts\"}]'"
    exit 1
fi

CLAIMED_DELIVERABLES="$1"
SESSION_ID="$2"

# Get session ID from current session file if not provided
if [ -z "$SESSION_ID" ] && [ -f ".claude/guardrails/.current-session" ]; then
    SESSION_ID=$(cat .claude/guardrails/.current-session)
fi

if [ -z "$SESSION_ID" ]; then
    echo "‚ùå No session ID provided and no current session found"
    exit 1
fi

echo "üèÅ Ending Agent Session: $SESSION_ID"
echo "üìã Validating claimed deliverables..."

# Create final file snapshot
if [ -f ".claude/guardrails/file-state-monitor.js" ]; then
    echo "üì∏ Creating final file snapshot..."
    node .claude/guardrails/file-state-monitor.js snapshot "session-end-$SESSION_ID" > /dev/null 2>&1
fi

# End execution tracking
if [ -f ".claude/guardrails/execution-tracker.js" ]; then
    echo "üîß Finalizing execution tracking..."
    node .claude/guardrails/execution-tracker.js end "$CLAIMED_DELIVERABLES" > /dev/null 2>&1
fi

# Validate handoff
if [ -f ".claude/guardrails/agent-handoff-validator.js" ]; then
    echo "üîç Validating agent handoff..."
    VALIDATION_RESULT=$(node .claude/guardrails/agent-handoff-validator.js validate "$SESSION_ID" "$CLAIMED_DELIVERABLES" 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Handoff validation passed"
        VALIDATION_SUCCESS=true
    else
        echo "‚ùå Handoff validation failed"
        echo "$VALIDATION_RESULT"
        VALIDATION_SUCCESS=false
    fi
else
    echo "‚ö†Ô∏è  Agent guardrails not available - skipping validation"
    VALIDATION_SUCCESS=true
fi

# Run comprehensive verification
if [ -f ".claude/guardrails/verify-agent.js" ]; then
    echo "üîç Running comprehensive agent verification..."
    VERIFICATION_RESULT=$(node .claude/guardrails/verify-agent.js verify "$SESSION_ID" --build 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Agent verification passed"
    else
        echo "‚ùå Agent verification failed"
        echo "$VERIFICATION_RESULT"
    fi
fi

# Update reliability metrics
if [ -f ".claude/guardrails/reliability-metrics.js" ]; then
    echo "üìà Updating reliability metrics..."
    
    # Determine session success based on validation
    if [ "$VALIDATION_SUCCESS" = true ]; then
        SCORE=95
        SUCCESS=true
    else
        SCORE=30
        SUCCESS=false
    fi
    
    # Record session metrics
    SESSION_DATA=$(cat <<EOF
{
  "sessionId": "$SESSION_ID",
  "agentType": "unknown",
  "success": $SUCCESS,
  "score": $SCORE,
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
  "executionTime": 5000,
  "toolCallsCount": 3,
  "claimsCount": 1,
  "verifiedClaims": $([ "$SUCCESS" = true ] && echo 1 || echo 0),
  "phantomClaims": $([ "$SUCCESS" = true ] && echo 0 || echo 1),
  "issues": $([ "$SUCCESS" = true ] && echo "[]" || echo "[\"Handoff validation failed\"]")
}
EOF
)
    
    echo "$SESSION_DATA" | node .claude/guardrails/reliability-metrics.js record "$(echo "$SESSION_DATA" | tr -d '\n')" > /dev/null 2>&1
fi

# Clean up current session file
rm -f .claude/guardrails/.current-session

if [ "$VALIDATION_SUCCESS" = true ]; then
    echo "üéâ Agent session completed successfully: $SESSION_ID"
    exit 0
else
    echo "üí• Agent session failed validation: $SESSION_ID"
    exit 1
fi